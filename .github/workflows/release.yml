#
# Copyright (c) 2022 ZettaScale Technology
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors:
#   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
#
name: Release

on:
  schedule:
    - cron: "0 0 * * 1-5"
  workflow_dispatch:
    inputs:
      live-run:
        type: boolean
        description: Live-run
        required: false
      version:
        type: string
        description: Release number
        required: false
      zenoh-c-version:
        type: string
        description: Release number of zenoh-c
        required: false
      zenoh-pico-version:
        type: string
        description: Release number of zenoh-pico
        required: false
      branch:
        type: string
        description: Release branch
        required: false

jobs:
  tag:
    name: Branch, Bump & tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.create-release-branch.outputs.version }}
      branch: ${{ steps.create-release-branch.outputs.branch }}
    steps:
      - id: create-release-branch
        uses: eclipse-zenoh/ci/create-release-branch@main
        with:
          repo: ${{ github.repository }}
          live-run: ${{ inputs.live-run || false }}
          # FIXME(fuzzypixelz): When the version is undefined (e.g. on schedule
          # events) we cannot use git-describe as CMake doesn't support it.
          # However, we still need some placeholder version to test that the
          # version can be reliably bumped.
          version: ${{ inputs.version || '0.0.0' }}
          branch: ${{ inputs.branch }}
          github-token: ${{ secrets.BOT_TOKEN_WORKFLOW }}

      - name: Clone this repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.create-release-branch.outputs.branch }}

      - name: Bump and tag project
        run: bash ci/scripts/bump-and-tag.bash
        env:
          LIVE_RUN: ${{ inputs.live-run || false }}
          VERSION: ${{ steps.create-release-branch.outputs.version }}
          BRANCH: ${{ steps.create-release-branch.outputs.branch }}
          ZENOH_C_BRANCH: ${{ inputs.zenoh-c-version && format('release/{0}', inputs.zenoh-c-version) || '' }}
          ZENOH_PICO_BRANCH: ${{ inputs.zenoh-pico-version && format('release/{0}', inputs.zenoh-pico-version) || '' }}
          GIT_USER_NAME: eclipse-zenoh-bot
          GIT_USER_EMAIL: eclipse-zenoh-bot@users.noreply.github.com

  build:
    name: Build packages for Linux
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - name: Clone this repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.tag.outputs.branch }}

      - id: build
        run: bash ci/scripts/build.bash
        env:
          REPO: ${{ github.repository }}
          VERSION: ${{ needs.tag.outputs.version }}

      - name: Prepare standalone archives
        shell: bash
        run: |
          zip_filename=$(readlink -f ./build/packages/*.zip)
          cp ${zip_filename} zenoh-cpp-${{ inputs.version || '0.0.0'}}-x86_64-apple-darwin-standalone.zip
          cp ${zip_filename} zenoh-cpp-${{ inputs.version || '0.0.0'}}-aarch64-apple-darwin-standalone.zip

      - name: Upload library archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.archive-lib }}
          path: ${{ steps.build.outputs.archive-lib }}

      # Hack to upload header-only package in a format that homebrew release action can use.
      - name: Upload archive for Homebrew (x86_64)
        uses: actions/upload-artifact@v4
        with:
          name: zenoh-cpp-${{ inputs.version || '0.0.0'}}-x86_64-apple-darwin-standalone.zip
          path: zenoh-cpp-${{ inputs.version || '0.0.0'}}-x86_64-apple-darwin-standalone.zip

      # Hack to upload header-only package in a format that homebrew release action can use.
      - name: Upload archive for Homebrew (aarch64)
        uses: actions/upload-artifact@v4
        with:
          name: zenoh-cpp-${{ inputs.version || '0.0.0'}}-aarch64-apple-darwin-standalone.zip
          path: zenoh-cpp-${{ inputs.version || '0.0.0'}}-aarch64-apple-darwin-standalone.zip

      - name: Upload DEB archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.archive-deb }}
          path: ${{ steps.build.outputs.archive-deb }}

      - name: Upload RPM archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.archive-rpm }}
          path: ${{ steps.build.outputs.archive-rpm }}

  debian:
    name: Publish Debian packages
    needs: [tag, build]
    uses: eclipse-zenoh/ci/.github/workflows/release-crates-debian.yml@main
    with:
      no-build: true
      live-run: ${{ inputs.live-run || false }}
      version: ${{ needs.tag.outputs.version }}
      repo: ${{ github.repository }}
      branch: ${{ needs.tag.outputs.branch }}
      installation-test: false
    secrets: inherit

  homebrew:
    name: Publish Homebrew formulae
    needs: [tag, build]
    uses: eclipse-zenoh/ci/.github/workflows/release-crates-homebrew.yml@main
    with:
      no-build: true
      repo: ${{ github.repository }}
      live-run: ${{ inputs.live-run || false }}
      version: ${{ needs.tag.outputs.version }}
      branch: ${{ needs.tag.outputs.branch }}
      # artifact-patterns input is not used when no-build=true, but it's a required argument
      artifact-patterns: |
        ^include$
      formulae: |
        libzenohcpp
    secrets: inherit

  eclipse:
    needs: [tag, build]
    runs-on: ubuntu-latest
    steps:
      - uses: eclipse-zenoh/ci/publish-crates-eclipse@main
        with:
          live-run: ${{ inputs.live-run || false }}
          version: ${{ needs.tag.outputs.version }}
          ssh-host: genie.zenoh@projects-storage.eclipse.org
          ssh-host-path: /home/data/httpd/download.eclipse.org/zenoh/zenoh-cpp
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-passphrase: ${{ secrets.SSH_PASSPHRASE }}
          archive-patterns: '.*\.zip'

  github:
    needs: [tag, build]
    runs-on: ubuntu-latest
    steps:
      - uses: eclipse-zenoh/ci/publish-crates-github@main
        with:
          repo: ${{ github.repository }}
          live-run: ${{ inputs.live-run || false }}
          version: ${{ needs.tag.outputs.version }}
          branch: ${{ needs.tag.outputs.branch }}
          github-token: ${{ secrets.BOT_TOKEN_WORKFLOW }}
          archive-patterns: '.*\.zip'
